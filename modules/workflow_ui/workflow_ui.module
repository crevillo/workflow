<?php

/**
 * @file
 * Provides administrative UI for workflow.
 */

use Drupal\Core\Routing\RouteMatchInterface;

// TODO D8-port: Caveat: Several hooks have moved into the EntityWorkflowUIController class.

// TODO D8-port: Rename WORKFLOW_ADMIN_UI_ARROW once permissions and transitions are converted.
define('WORKFLOW_ADMIN_UI_ARROW', '&#8594;');

/**
 * Implements hook_entity_info_alter().
 *
 * Adds Admin UI to entities, using EntityWorkflowUIController.
 */
function workflow_ui_entity_info_alter(&$entity_info) {
  return; // TODO D8-port: add/remove this function.

  $entity_info['Workflow'] += array(
    'access callback' => 'workflow_access',
    'admin ui' => array(
      'path' => 'admin/config/workflow/workflow',
      // Do not add 'file', since each page has its own file.
      // 'file' => 'workflow_ui/workflow_ui.pages.inc',
      'controller class' => 'EntityWorkflowUIController',
      'menu wildcard' => '%workflow',
    ),
  );
}

/**
 * Implements hook_help().
 */
function workflow_ui_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'entity.workflow_workflow.collection':
    case 'entity.workflow_workflow.add_form':
      return '';

    case 'entity.workflow_state.collection':
      return t("To create a new state, enter its name in the last row of the
        'State' column. Check the 'Active' box to make it effective. You may
        also drag it to the appropriate position.") . '<br />'
      . t("A state must be marked as active, to be available in the
        workflow's transitions.") . '<br />'
      . t("If you wish to inactivate a state that has content (i.e. count is
        not zero), then you need to select a state to which to reassign that
        content.");

    case 'entity.workflow_transition.collection':
      return t('You are currently viewing the possible transitions to and from
        workflow states. The state is shown in the left column; the state to be
        moved to is to the right. For each transition, check the box next to
        the role(s) that may initiate the transition. For example, if only the
        "production editor" role may move a node from Review state to the
        Published state, check the box next to "production editor". The author
        role is built in and refers to the user who authored the node.')
      . '<br /><i>'
      . t("If not all roles are in the list, please review which roles may
        'participate in workflows' <a href='!url'> on the Permissions page</a>.",
        array('!url' => \Drupal::url(('user.admin_permissions'))));

    case 'entity.workflow_label.collection':
      return t('You can add labels to transitions if you don\'t like the
        standard state labels. They will modify the Workflow form options, so
        specific workflow transitions can have their own labels, relative to
        the beginning and ending states. Rather than showing the user a
        workflow box containing options like "review required" as a state in
        the workflow, it could say "move to the editing department for grammar
        review".');
  }
}

/**
 * Determines whether the given user has access to a Workflow entity.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create' or 'delete'.
 * @param object $entity
 *   Entity to check access for. If no entity is given, it will be
 *   determined whether access is allowed for all entities of the given type.
 * @param object $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @param string $entity_type
 *   The entity type.
 *
 * @return bool
 *   Whether access is allowed or not. If the entity type does not specify any
 *   access information, NULL is returned.
 */
function workflow_access($op, $entity, $account, $entity_type) {
  // TODO D8-port: add/remove/update this function.
  return $account->hasPermission('administer workflow');
}

/**
 * Implements hook_theme().
 */
function workflow_ui_theme() {
  // TODO D8-port: add/remove/update this function.
  return array(
    'workflow_ui_states_form' => array('render element' => 'form'),
    'workflow_ui_transitions_form' => array('render element' => 'form'),
  );
}
